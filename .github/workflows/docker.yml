name: Sync Home Assistant from GHCR

on:
  push:
    paths:
      - 'versions.txt'
  workflow_dispatch:

env:
  ALIYUN_REGISTRY: ${{ secrets.ALIYUN_REGISTRY }}
  ALIYUN_NAMESPACE: ${{ secrets.ALIYUN_NAMESPACE }}
  VERSIONS_FILE: 'versions.txt'

jobs:
  version_loader:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.load_versions.outputs.versions }}
      valid_versions: ${{ steps.validate_versions.outputs.valid_versions }}
    steps:
      - uses: actions/checkout@v3

      - name: Load version list
        id: load_versions
        run: |
          versions=$(cat $VERSIONS_FILE | grep -v '^#' | grep -v '^$' | jq -R -s -c 'split("\n") | map(select(. != ""))')
          echo "versions=${versions}" >> $GITHUB_OUTPUT

      - name: Validate versions exist in GHCR
        id: validate_versions
        run: |
          valid_versions=()
          for image_version in $(cat $VERSIONS_FILE | grep -v '^#' | grep -v '^$'); do
            IFS=':' read -r image_type version <<< "$image_version"
            
            case "$image_type" in
              home-assistant)
                if docker manifest inspect "ghcr.io/home-assistant/home-assistant:$version" >/dev/null 2>&1; then
                  valid_versions+=("$image_type:$version")
                  echo "✅ Version $version exists for home-assistant"
                else
                  echo "::warning::Version $version does not exist for home-assistant"
                fi
                ;;
                
              cli|audio|dns|multicast|observer|odmd)
                arch="amd64"
                full_image_name="${arch}-hassio-${image_type}"
                
                if docker manifest inspect "ghcr.io/home-assistant/${full_image_name}:$version" >/dev/null 2>&1; then
                  valid_versions+=("$image_type:$version")
                  echo "✅ Version $version exists for $image_type (amd64)"
                else
                  echo "::warning::Version $version does not exist for ${full_image_name}"
                  echo "Available versions:"
                  curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                    "https://ghcr.io/v2/home-assistant/${full_image_name}/tags/list" | jq .tags || true
                fi
                ;;
                
              *)
                echo "::error::Unsupported image type: $image_type"
                exit 1
                ;;
            esac
          done
          echo "valid_versions=$(jq -c -n '$ARGS.positional' --args "${valid_versions[@]}")" >> $GITHUB_OUTPUT

  image_sync:
    needs: version_loader
    if: ${{ fromJSON(needs.version_loader.outputs.valid_versions) != null && fromJSON(needs.version_loader.outputs.valid_versions).length > 0 }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image_version: ${{ fromJSON(needs.version_loader.outputs.valid_versions) }}
        include:
          - image_type: home-assistant
            arch_suffix: "homeassistant"
            arches: >-
              ["", "amd64-", "i386-", "armhf-", "armv7-", "aarch64-",
              "generic-x86-64-", "intel-nuc-", "khadas-vim3-",
              "odroid-c2-", "odroid-c4-", "odroid-m1-", "odroid-n2-",
              "odroid-xu-", "qemuarm-", "qemuarm-64-", "qemux86-",
              "qemux86-64-", "raspberrypi-", "raspberrypi2-",
              "raspberrypi3-", "raspberrypi3-64-", "raspberrypi4-",
              "raspberrypi4-64-", "raspberrypi5-64-", "tinker-",
              "yellow-", "green-"]
          - image_type: cli
            arch_suffix: "hassio-cli"
            arches: >-
              ["amd64-", "i386-", "armhf-", "armv7-", "aarch64-"]
          - image_type: audio
            arch_suffix: "hassio-audio"
            arches: >-
              ["amd64-", "i386-", "armhf-", "armv7-", "aarch64-"]
          - image_type: dns
            arch_suffix: "hassio-dns"
            arches: >-
              ["amd64-", "i386-", "armhf-", "armv7-", "aarch64-"]
          - image_type: multicast
            arch_suffix: "hassio-multicast"
            arches: >-
              ["amd64-", "i386-", "armhf-", "armv7-", "aarch64-"]
          - image_type: observer
            arch_suffix: "hassio-observer"
            arches: >-
              ["amd64-", "i386-", "armhf-", "armv7-", "aarch64-"]
          - image_type: odmd
            arch_suffix: "hassio-odmd"
            arches: >-
              ["amd64-", "i386-", "armhf-", "armv7-", "aarch64-"]
    steps:
      - uses: actions/checkout@v3

      - name: Parse image type and version
        id: parse
        run: |
          IFS=':' read -r image_type version <<< "${{ matrix.image_version }}"
          echo "image_type=${image_type}" >> $GITHUB_OUTPUT
          echo "version=${version}" >> $GITHUB_OUTPUT

      - name: Login to Aliyun
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ALIYUN_REGISTRY }}
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}

      - name: Login to GHCR
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Sync images
        run: |
          image_type="${{ steps.parse.outputs.image_type }}"
          version="${{ steps.parse.outputs.version }}"
          arch_suffix="${{ matrix.arch_suffix }}"
          
          # 主镜像处理
          if [[ "$image_type" == "home-assistant" ]]; then
            # 无架构前缀的主镜像
            default_arch="home-assistant"
            if docker manifest inspect "ghcr.io/home-assistant/$default_arch:$version" >/dev/null 2>&1; then
              echo "🚀 Syncing $default_arch:$version"
              docker pull "ghcr.io/home-assistant/$default_arch:$version"
              docker tag "ghcr.io/home-assistant/$default_arch:$version" "${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/$default_arch:$version"
              docker push "${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/$default_arch:$version"
              
              # 额外标签
              docker tag "ghcr.io/home-assistant/$default_arch:$version" "${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/$default_arch:latest"
              docker push "${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/$default_arch:latest"
              
              if [[ "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                ym_tag=$(echo "$version" | awk -F. '{print $1"."$2}')
                docker tag "ghcr.io/home-assistant/$default_arch:$version" "${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/$default_arch:stable"
                docker tag "ghcr.io/home-assistant/$default_arch:$version" "${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/$default_arch:$ym_tag"
                docker push "${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/$default_arch:stable"
                docker push "${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/$default_arch:$ym_tag"
              fi
              
              docker rmi "ghcr.io/home-assistant/$default_arch:$version" || true
            fi
          fi
          
          # 处理所有架构变体
          arches=${{ fromJSON(matrix.arches) }}
          for arch_prefix in ${arches[@]}; do
            if [[ "$image_type" == "home-assistant" ]]; then
              src_image="ghcr.io/home-assistant/${arch_prefix}${arch_suffix}"
              dest_image="${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/${arch_prefix}${arch_suffix}"
            else
              # 组件镜像处理
              src_image="ghcr.io/home-assistant/${arch_prefix}hassio-${image_type}"
              dest_image="${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/${arch_prefix}hassio-${image_type}"
            fi
            
            echo "🔍 Checking ${src_image}:$version"
            if docker manifest inspect "${src_image}:$version" >/dev/null 2>&1; then
              echo "🚀 Syncing ${src_image}:$version"
              docker pull "${src_image}:$version"
              docker tag "${src_image}:$version" "${dest_image}:$version"
              docker push "${dest_image}:$version"
              
              # 仅主镜像打latest标签
              if [[ "$image_type" == "home-assistant" ]]; then
                docker tag "${src_image}:$version" "${dest_image}:latest"
                docker push "${dest_image}:latest"
              fi
              
              docker rmi "${src_image}:$version" || true
            else
              echo "::warning::Skipping ${src_image} (not available)"
            fi
          done
