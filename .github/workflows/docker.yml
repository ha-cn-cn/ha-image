name: Sync Home Assistant from GHCR

on:
  push:
    paths:
      - 'versions.txt'

env:
  ALIYUN_REGISTRY: ${{ secrets.ALIYUN_REGISTRY }}
  ALIYUN_NAMESPACE: ${{ secrets.ALIYUN_NAMESPACE }}
  VERSIONS_FILE: 'versions.txt'

jobs:
  version_loader:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.load_versions.outputs.versions }}
      valid_versions: ${{ steps.validate_versions.outputs.valid_versions }}
    steps:
      - uses: actions/checkout@v3

      - name: Load version list
        id: load_versions
        run: |
          versions=$(cat $VERSIONS_FILE | grep -v '^#' | grep -v '^$' | jq -R -s -c 'split("\n") | map(select(. != ""))')
          echo "versions=${versions}" >> $GITHUB_OUTPUT

      - name: Validate versions exist in GHCR
        id: validate_versions
        run: |
          valid_versions=()
          for image_version in $(cat $VERSIONS_FILE | grep -v '^#' | grep -v '^$'); do
            IFS=':' read -r image version <<< "$image_version"
            if [ "$image" == "home-assistant" ]; then
              if docker manifest inspect ghcr.io/home-assistant/home-assistant:$version >/dev/null 2>&1; then
                valid_versions+=("$version")
                echo "Version $version exists in GHCR for home-assistant"
              else
                echo "::warning::Version $version does not exist in GHCR for home-assistant image"
              fi
            else
              echo "::warning::Currently only 'home-assistant' image is supported, skipping $image"
            fi
          done
          echo "valid_versions=$(jq -c -n '$ARGS.positional' --args "${valid_versions[@]}")" >> $GITHUB_OUTPUT

  image_sync:
    needs: version_loader
    if: ${{ fromJSON(needs.version_loader.outputs.valid_versions) != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJSON(needs.version_loader.outputs.valid_versions) }}
        arch: [
          'home-assistant',
          'amd64-homeassistant',
          'i386-homeassistant',
          'armhf-homeassistant',
          'armv7-homeassistant',
          'aarch64-homeassistant',
          'generic-x86-64-homeassistant',
          'intel-nuc-homeassistant',
          'khadas-vim3-homeassistant',
          'odroid-c2-homeassistant',
          'odroid-c4-homeassistant',
          'odroid-m1-homeassistant',
          'odroid-n2-homeassistant',
          'odroid-xu-homeassistant',
          'qemuarm-homeassistant',
          'qemuarm-64-homeassistant',
          'qemux86-homeassistant',
          'qemux86-64-homeassistant',
          'raspberrypi-homeassistant',
          'raspberrypi2-homeassistant',
          'raspberrypi3-homeassistant',
          'raspberrypi3-64-homeassistant',
          'raspberrypi4-homeassistant',
          'raspberrypi4-64-homeassistant',
          'raspberrypi5-64-homeassistant',
          'tinker-homeassistant',
          'yellow-homeassistant',
          'green-homeassistant'
        ]
    steps:
      - uses: actions/checkout@v3

      - name: Login to Aliyun
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ALIYUN_REGISTRY }}
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}

      - name: Login to GHCR
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Pull and push image
        run: |
          SRC_IMAGE="ghcr.io/home-assistant/${{ matrix.arch }}"
          DEST_IMAGE="${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/${{ matrix.arch }}"
          
          # Check if the specific arch/version exists
          if ! docker manifest inspect ${SRC_IMAGE}:${{ matrix.version }} >/dev/null 2>&1; then
            echo "::warning::Skipping ${{ matrix.arch }}:${{ matrix.version }} (not available)"
            exit 0
          fi
          
          # Pull the image
          docker pull ${SRC_IMAGE}:${{ matrix.version }}
          
          # Tag and push
          docker tag ${SRC_IMAGE}:${{ matrix.version }} ${DEST_IMAGE}:${{ matrix.version }}
          docker tag ${SRC_IMAGE}:${{ matrix.version }} ${DEST_IMAGE}:latest
          docker push ${DEST_IMAGE}:${{ matrix.version }}
          docker push ${DEST_IMAGE}:latest
          
          # Special tags for main image
          if [ "${{ matrix.arch }}" == "home-assistant" ]; then
            docker tag ${SRC_IMAGE}:${{ matrix.version }} ${DEST_IMAGE}:stable
            ym_tag=$(echo "${{ matrix.version }}" | awk -F. '{print $1"."$2}')
            docker tag ${SRC_IMAGE}:${{ matrix.version }} ${DEST_IMAGE}:${ym_tag}
            docker push ${DEST_IMAGE}:stable
            docker push ${DEST_IMAGE}:${ym_tag}
          fi

      - name: Cleanup
        run: |
          DEST_IMAGE="${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/${{ matrix.arch }}"
          docker rmi ghcr.io/home-assistant/${{ matrix.arch }}:${{ matrix.version }} || true
          docker rmi ${DEST_IMAGE}:${{ matrix.version }} || true
          docker rmi ${DEST_IMAGE}:latest || true
          
          if [ "${{ matrix.arch }}" == "home-assistant" ]; then
            ym_tag=$(echo "${{ matrix.version }}" | awk -F. '{print $1"."$2}')
            docker rmi ${DEST_IMAGE}:${ym_tag} || true
            docker rmi ${DEST_IMAGE}:stable || true
          fi
