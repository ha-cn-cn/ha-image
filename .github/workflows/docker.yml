name: Sync Home Assistant and HassIO Components

on:
  push:
    paths:
      - 'versions.txt'

env:
  ALIYUN_REGISTRY: ${{ secrets.ALIYUN_REGISTRY }}
  ALIYUN_NAMESPACE: ${{ secrets.ALIYUN_NAMESPACE }}
  VERSIONS_FILE: 'versions.txt'
  # HassIO组件列表
  SUPPORTED_COMPONENTS: 'cli|dns|audio|multicast|observer'

jobs:
  version_loader:
    runs-on: ubuntu-latest
    outputs:
      ha_versions: ${{ steps.parse_versions.outputs.ha_versions }}
      hassio_versions: ${{ steps.parse_versions.outputs.hassio_versions }}
    steps:
      - uses: actions/checkout@v3

      - name: Parse and validate versions
        id: parse_versions
        run: |
          # 过滤空行和注释
          valid_lines=$(grep -v '^#' $VERSIONS_FILE | grep -v '^$')

          # 分类处理
          ha_versions=$(echo "$valid_lines" | grep -E '^homeassistant:[0-9]+\.[0-9]+\.[0-9]+' | jq -R -s -c 'split("\n") | map(select(. != ""))')
          hassio_versions=$(echo "$valid_lines" | grep -E "^($SUPPORTED_COMPONENTS):[0-9]+\.[0-9]+\.[0-9]+" | jq -R -s -c 'split("\n") | map(select(. != ""))')

          # 校验至少有一类有效输入
          if [[ -z "$ha_versions" && -z "$hassio_versions" ]]; then
            echo "::error::无效输入！必须为以下格式之一：\nHome Assistant: homeassistant:版本号\nHassIO组件: cli|dns|audio|multicast|observer:版本号"
            exit 1
          fi

          echo "ha_versions=${ha_versions}" >> $GITHUB_OUTPUT
          echo "hassio_versions=${hassio_versions}" >> $GITHUB_OUTPUT
          echo "检测到 Home Assistant 版本：$ha_versions"
          echo "检测到 HassIO 组件版本：$hassio_versions"

  # Home Assistant 同步任务
  sync_homeassistant:
    needs: version_loader
    if: ${{ fromJSON(needs.version_loader.outputs.ha_versions) != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJSON(needs.version_loader.outputs.ha_versions) }}
        arch:
          - 'home-assistant'
          - 'amd64-homeassistant'
          - 'i386-homeassistant'
          - 'armhf-homeassistant'
          - 'armv7-homeassistant'
          - 'aarch64-homeassistant'
          - 'generic-x86-64-homeassistant'
          - 'intel-nuc-homeassistant'
          - 'khadas-vim3-homeassistant'
          - 'odroid-c2-homeassistant'
          - 'odroid-c4-homeassistant'
          - 'odroid-m1-homeassistant'
          - 'odroid-n2-homeassistant'
          - 'odroid-xu-homeassistant'
          - 'qemuarm-homeassistant'
          - 'qemuarm-64-homeassistant'
          - 'qemux86-homeassistant'
          - 'qemux86-64-homeassistant'
          - 'raspberrypi-homeassistant'
          - 'raspberrypi2-homeassistant'
          - 'raspberrypi3-homeassistant'
          - 'raspberrypi3-64-homeassistant'
          - 'raspberrypi4-homeassistant'
          - 'raspberrypi4-64-homeassistant'
          - 'raspberrypi5-64-homeassistant'
          - 'tinker-homeassistant'
          - 'yellow-homeassistant'
          - 'green-homeassistant'
    steps:
      - uses: actions/checkout@v3

      - name: Login to Aliyun
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ALIYUN_REGISTRY }}
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}

      - name: Process Home Assistant image
        run: |
          version=$(echo "${{ matrix.version }}" | cut -d':' -f2)
          SRC_IMAGE="ghcr.io/home-assistant/${{ matrix.arch }}"
          DEST_IMAGE="${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/${{ matrix.arch }}"

          docker pull "${SRC_IMAGE}:${version}" || {
            echo "::warning::跳过 ${{ matrix.arch }}:${version}"
            exit 0
          }

          # 打标签
          docker tag "${SRC_IMAGE}:${version}" "${DEST_IMAGE}:${version}"
          docker tag "${SRC_IMAGE}:${version}" "${DEST_IMAGE}:latest"

          # 主镜像特殊标签
          if [ "${{ matrix.arch }}" = "home-assistant" ]; then
            ym_tag=$(echo "${version}" | awk -F. '{print $1"."$2}')
            docker tag "${SRC_IMAGE}:${version}" "${DEST_IMAGE}:stable"
            docker tag "${SRC_IMAGE}:${version}" "${DEST_IMAGE}:${ym_tag}"
          fi

          # 推送
          docker push "${DEST_IMAGE}:${version}"
          docker push "${DEST_IMAGE}:latest"
          [ "${{ matrix.arch }}" = "home-assistant" ] && docker push "${DEST_IMAGE}:stable"
          [ "${{ matrix.arch }}" = "home-assistant" ] && docker push "${DEST_IMAGE}:${ym_tag}"

          # 清理
          docker rmi "${SRC_IMAGE}:${version}" || true
          [ "${{ matrix.arch }}" = "home-assistant" ] && docker rmi "${DEST_IMAGE}:${ym_tag}" || true

  # HassIO 组件同步任务
  sync_hassio:
    needs: version_loader
    if: ${{ fromJSON(needs.version_loader.outputs.hassio_versions) != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJSON(needs.version_loader.outputs.hassio_versions) }}
        arch:
          - 'amd64'
          - 'i386'
          - 'armhf'
          - 'armv7'
          - 'aarch64'
    steps:
      - uses: actions/checkout@v3

      - name: Login to Aliyun
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ALIYUN_REGISTRY }}
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}

      - name: Process HassIO component
        run: |
          component=$(echo "${{ matrix.image }}" | cut -d':' -f1)
          version=$(echo "${{ matrix.image }}" | cut -d':' -f2)
          SRC_IMAGE="ghcr.io/home-assistant/${{ matrix.arch }}-hassio-${component}"
          DEST_IMAGE="${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/${{ matrix.arch }}-hassio-${component}"

          docker pull "${SRC_IMAGE}:${version}" || {
            echo "::warning::跳过 ${{ matrix.arch }}-hassio-${component}:${version}"
            exit 0
          }

          docker tag "${SRC_IMAGE}:${version}" "${DEST_IMAGE}:${version}"
          docker tag "${SRC_IMAGE}:${version}" "${DEST_IMAGE}:latest"

          docker push "${DEST_IMAGE}:${version}"
          docker push "${DEST_IMAGE}:latest"

          docker rmi "${SRC_IMAGE}:${version}" || true
