name: Sync HassIO Components from GHCR

on:
  push:
    paths:
      - 'versions.txt'

env:
  ALIYUN_REGISTRY: ${{ secrets.ALIYUN_REGISTRY }}
  ALIYUN_NAMESPACE: ${{ secrets.ALIYUN_NAMESPACE }}
  VERSIONS_FILE: 'versions.txt'
  # 支持的镜像类型和架构
  SUPPORTED_COMPONENTS: 'cli|dns|audio|multicast|observer'
  SUPPORTED_ARCHS: 'amd64|i386|armhf|armv7|aarch64'

jobs:
  version_loader:
    runs-on: ubuntu-latest
    outputs:
      image_list: ${{ steps.parse_versions.outputs.image_list }}
    steps:
      - uses: actions/checkout@v3

      - name: Validate and parse versions
        id: parse_versions
        run: |
          # 过滤空行和注释，提取有效行
          valid_lines=$(grep -v '^#' $VERSIONS_FILE | grep -v '^$' | grep -E "^($SUPPORTED_COMPONENTS):[0-9]+\.[0-9]+\.[0-9]+")
          
          # 检查是否有有效输入
          if [[ -z "$valid_lines" ]]; then
            echo "::error::格式错误！每行必须为 '组件名:版本号'（如 cli:2024.09.0），支持组件：$SUPPORTED_COMPONENTS"
            exit 1
          fi

          # 转换为JSON数组输出
          image_list=$(echo "$valid_lines" | jq -R -s -c 'split("\n") | map(select(. != ""))')
          echo "image_list=${image_list}" >> $GITHUB_OUTPUT
          echo "解析到的镜像列表："
          echo "$valid_lines"

  image_sync:
    needs: version_loader
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJSON(needs.version_loader.outputs.image_list) }}
        arch: ['amd64', 'i386', 'armhf', 'armv7', 'aarch64']
    steps:
      - uses: actions/checkout@v3

      - name: Login to Aliyun
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ALIYUN_REGISTRY }}
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}

      - name: Extract component and version
        id: extract
        run: |
          component=$(echo "${{ matrix.image }}" | cut -d':' -f1)
          version=$(echo "${{ matrix.image }}" | cut -d':' -f2)
          echo "component=${component}" >> $GITHUB_OUTPUT
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "正在处理：$component:$version (架构: ${{ matrix.arch }})"

      - name: Pull and tag images
        run: |
          SRC_IMAGE="ghcr.io/home-assistant/${{ matrix.arch }}-hassio-${{ steps.extract.outputs.component }}"
          DEST_IMAGE="${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/${{ matrix.arch }}-hassio-${{ steps.extract.outputs.component }}"
          
          # 拉取镜像
          docker pull "${SRC_IMAGE}:${{ steps.extract.outputs.version }}" || {
            echo "::warning::跳过 ${{ matrix.arch }}-hassio-${{ steps.extract.outputs.component }}:${{ steps.extract.outputs.version }}（镜像不存在）"
            exit 0
          }

          # 打标签
          docker tag "${SRC_IMAGE}:${{ steps.extract.outputs.version }}" "${DEST_IMAGE}:${{ steps.extract.outputs.version }}"
          docker tag "${SRC_IMAGE}:${{ steps.extract.outputs.version }}" "${DEST_IMAGE}:latest"

      - name: Push to Aliyun
        run: |
          DEST_IMAGE="${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/${{ matrix.arch }}-hassio-${{ steps.extract.outputs.component }}"
          docker push "${DEST_IMAGE}:${{ steps.extract.outputs.version }}"
          docker push "${DEST_IMAGE}:latest"

      - name: Cleanup
        run: |
          docker rmi "ghcr.io/home-assistant/${{ matrix.arch }}-hassio-${{ steps.extract.outputs.component }}:${{ steps.extract.outputs.version }}" || true
          docker rmi "${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/${{ matrix.arch }}-hassio-${{ steps.extract.outputs.component }}:${{ steps.extract.outputs.version }}" || true
          docker rmi "${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/${{ matrix.arch }}-hassio-${{ steps.extract.outputs.component }}:latest" || true
