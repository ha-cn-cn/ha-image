name: Sync Home Assistant from GHCR

on:
  push:
    paths:
      - 'versions.txt'
  workflow_dispatch:

env:
  ALIYUN_REGISTRY: ${{ secrets.ALIYUN_REGISTRY }}
  ALIYUN_NAMESPACE: ${{ secrets.ALIYUN_NAMESPACE }}
  VERSIONS_FILE: 'versions.txt'

jobs:
  version_loader:
    runs-on: ubuntu-latest
    outputs:
      valid_versions: ${{ steps.validate_versions.outputs.valid_versions }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Docker
        uses: docker/setup-buildx-action@v2

      - name: Validate versions
        id: validate_versions
        run: |
          valid_versions=()
          while IFS=: read -r image_type version; do
            # 跳过注释和空行
            [[ "$image_type" =~ ^#|^$ ]] && continue
            
            # 统一转换为小写
            image_type=$(echo "$image_type" | tr '[:upper:]' '[:lower:]')
            version=$(echo "$version" | xargs)  # 去除空格

            case "$image_type" in
              home-assistant)
                image_path="home-assistant/home-assistant"
                ;;
              cli|audio|dns|multicast|observer|odmd)
                image_path="home-assistant/$image_type"
                ;;
              *)
                echo "::warning::Unsupported image type: $image_type"
                continue
                ;;
            esac

            if docker manifest inspect "ghcr.io/${image_path}:${version}" >/dev/null 2>&1; then
              valid_versions+=("$image_type:$version")
              echo "✅ Valid: $image_type:$version"
            else
              echo "::warning::Not found in GHCR: $image_type:$version"
            fi
          done < "$VERSIONS_FILE"

          echo "valid_versions=$(jq -c -n '$ARGS.positional' --args "${valid_versions[@]}")" >> $GITHUB_OUTPUT

  image_sync:
    needs: version_loader
    if: ${{ fromJSON(needs.version_loader.outputs.valid_versions) != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image_version: ${{ fromJSON(needs.version_loader.outputs.valid_versions) }}
        include:
          # 主镜像架构
          - image_type: home-assistant
            arches: >-
              ["", "amd64-", "i386-", "armhf-", "armv7-", "aarch64-",
               "generic-x86-64-", "intel-nuc-", "khadas-vim3-",
               "odroid-c2-", "odroid-c4-", "odroid-m1-", "odroid-n2-",
               "odroid-xu-", "qemuarm-", "qemuarm-64-", "qemux86-",
               "qemux86-64-", "raspberrypi-", "raspberrypi2-",
               "raspberrypi3-", "raspberrypi3-64-", "raspberrypi4-",
               "raspberrypi4-64-", "raspberrypi5-64-", "tinker-",
               "yellow-", "green-"]
            suffix: "homeassistant"
          
          # 组件镜像架构
          - image_type: cli
            arches: >-
              ["amd64-", "i386-", "armhf-", "armv7-", "aarch64-"]
            suffix: "hassio-cli"
          
          - image_type: audio
            arches: >-
              ["amd64-", "i386-", "armhf-", "armv7-", "aarch64-"]
            suffix: "hassio-audio"
          
          - image_type: dns
            arches: >-
              ["amd64-", "i386-", "armhf-", "armv7-", "aarch64-"]
            suffix: "hassio-dns"
          
          - image_type: multicast
            arches: >-
              ["amd64-", "i386-", "armhf-", "armv7-", "aarch64-"]
            suffix: "hassio-multicast"
          
          - image_type: observer
            arches: >-
              ["amd64-", "i386-", "armhf-", "armv7-", "aarch64-"]
            suffix: "hassio-observer"
          
          - image_type: odmd
            arches: >-
              ["amd64-", "i386-", "armhf-", "armv7-", "aarch64-"]
            suffix: "hassio-odmd"

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Docker
        uses: docker/setup-buildx-action@v2

      - name: Parse inputs
        id: parse
        run: |
          IFS=':' read -r image_type version <<< "${{ matrix.image_version }}"
          echo "image_type=${image_type}" >> $GITHUB_OUTPUT
          echo "version=${version}" >> $GITHUB_OUTPUT

      - name: Login to registries
        run: |
          echo "${{ secrets.ALIYUN_PASSWORD }}" | docker login \
            ${{ env.ALIYUN_REGISTRY }} \
            -u "${{ secrets.ALIYUN_USERNAME }}" \
            --password-stdin
          
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login \
            ghcr.io \
            -u "${{ github.actor }}" \
            --password-stdin

      - name: Sync images
        run: |
          # 主镜像特殊处理
          if [[ "${{ steps.parse.outputs.image_type }}" == "home-assistant" ]]; then
            src_image="ghcr.io/home-assistant/home-assistant"
            dest_image="${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/home-assistant"
            
            docker pull "${src_image}:${{ steps.parse.outputs.version }}"
            docker tag "${src_image}:${{ steps.parse.outputs.version }}" "${dest_image}:${{ steps.parse.outputs.version }}"
            docker push "${dest_image}:${{ steps.parse.outputs.version }}"
            
            # 额外标签
            docker tag "${src_image}:${{ steps.parse.outputs.version }}" "${dest_image}:latest"
            docker push "${dest_image}:latest"
            
            if [[ "${{ steps.parse.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              ym_tag=$(echo "${{ steps.parse.outputs.version }}" | awk -F. '{print $1"."$2}')
              docker tag "${src_image}:${{ steps.parse.outputs.version }}" "${dest_image}:stable"
              docker tag "${src_image}:${{ steps.parse.outputs.version }}" "${dest_image}:${ym_tag}"
              docker push "${dest_image}:stable"
              docker push "${dest_image}:${ym_tag}"
            fi
          fi

          # 处理所有架构变体
          arches=${{ fromJSON(matrix.arches) }}
          for arch_prefix in ${arches[@]}; do
            src_image="ghcr.io/home-assistant/${arch_prefix}${{ matrix.suffix }}"
            dest_image="${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/${arch_prefix}${{ matrix.suffix }}"
            
            if docker manifest inspect "${src_image}:${{ steps.parse.outputs.version }}" >/dev/null 2>&1; then
              echo "🚀 Syncing ${arch_prefix}${{ matrix.suffix }}:${{ steps.parse.outputs.version }}"
              
              docker pull "${src_image}:${{ steps.parse.outputs.version }}"
              docker tag "${src_image}:${{ steps.parse.outputs.version }}" "${dest_image}:${{ steps.parse.outputs.version }}"
              docker push "${dest_image}:${{ steps.parse.outputs.version }}"
              
              # 仅主镜像打latest标签
              if [[ "${{ steps.parse.outputs.image_type }}" == "home-assistant" ]]; then
                docker tag "${src_image}:${{ steps.parse.outputs.version }}" "${dest_image}:latest"
                docker push "${dest_image}:latest"
              fi
              
              docker rmi "${src_image}:${{ steps.parse.outputs.version }}" || true
            else
              echo "::notice::Skipping ${arch_prefix}${{ matrix.suffix }} (not available)"
            fi
          done

      - name: Cleanup
        if: always()
        run: |
          docker system prune -af
